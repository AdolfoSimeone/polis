module.exports = (app, helpers) => {
    const {
        addCorsHeader,
        auth,
        authOptional,
        COOKIES,
        denyIfNotFromWhitelistedDomain,
        devMode,
        enableAgid,
        fetchThirdPartyCookieTestPt1,
        fetchThirdPartyCookieTestPt2,
        fetchIndexForAdminPage,
        fetchIndexForConversation,
        fetchIndexForReportPage,
        fetchIndexWithoutPreloadData,
        getPidForParticipant,
        haltOnTimeout,
        HMAC_SIGNATURE_PARAM_NAME,
        hostname,
        makeFileFetcher,
        makeRedirectorTo,
        pidCache,
        portForAdminFiles,
        portForParticipationFiles,
        proxy,
        redirectIfApiDomain,
        redirectIfHasZidButNoConversationId,
        redirectIfNotHttps,
        redirectIfWrongDomain,
        timeout,
        winston,
        writeDefaultHead,
    
        middleware_log_request_body,
        middleware_log_middleware_errors,
        middleware_check_if_options,
        middleware_responseTime_start,
    
        handle_DELETE_metadata_answers,
        handle_DELETE_metadata_questions,
        handle_GET_bid,
        handle_GET_bidToPid,
        handle_GET_canvas_app_instructions_png,
        handle_GET_changePlanWithCoupon,
        handle_GET_comments,
        handle_GET_comments_translations,
        handle_GET_conditionalIndexFetcher,
        handle_GET_contexts,
        handle_GET_conversation_assigmnent_xml,
        handle_GET_conversationPreloadInfo,
        handle_GET_conversations,
        handle_GET_conversationsRecentActivity,
        handle_GET_conversationsRecentlyStarted,
        handle_GET_conversationStats,
        handle_GET_createPlanChangeCoupon,
        handle_GET_enterprise_deal_url,
        handle_GET_math_correlationMatrix,
        handle_GET_dataExport,
        handle_GET_dataExport_results,
        handle_GET_domainWhitelist,
        handle_GET_dummyButton,
        handle_GET_einvites,
        handle_GET_facebook_delete,
        handle_GET_groupDemographics,
        handle_GET_iim_conversation,
        handle_GET_iip_conversation,
        handle_GET_implicit_conversation_generation,
        handle_GET_launchPrep,
        handle_GET_localFile_dev_only,
        handle_GET_locations,
        handle_GET_logMaxmindResponse,
        handle_GET_lti_oauthv1_credentials,
        handle_GET_math_pca,
        handle_GET_math_pca2,
        handle_GET_metadata,
        handle_GET_metadata_answers,
        handle_GET_metadata_choices,
        handle_GET_metadata_questions,
        handle_GET_nextComment,
        handle_GET_notifications_subscribe,
        handle_GET_notifications_unsubscribe,
        handle_GET_participants,
        handle_GET_participation,
        handle_GET_participationInit,
        handle_GET_perfStats,
        handle_GET_ptptois,
        handle_GET_reports,
        handle_GET_setup_assignment_xml,
        handle_GET_slack_login,
        handle_GET_snapshot,
        handle_GET_stripe_account_connect,
        handle_GET_stripe_account_connected_oauth_callback,
        hangle_GET_testConnection,
        hangle_GET_testDatabase,
        handle_GET_tryCookie,
        handle_GET_twitter_image,
        handle_GET_twitter_oauth_callback,
        handle_GET_twitter_users,
        handle_GET_twitterBtn,
        handle_GET_users,
        handle_GET_verification,
        handle_GET_votes,
        handle_GET_votes_famous,
        handle_GET_votes_me,
        handle_GET_xids,
        handle_GET_zinvites,
    
        handle_POST_auth_deregister,
        handle_POST_auth_facebook,
        handle_POST_auth_login,
        handle_POST_auth_new,
        handle_POST_auth_password,
        handle_POST_auth_pwresettoken,
        handle_POST_auth_slack_redirect_uri,
        handle_POST_charge,
        handle_POST_comments,
        handle_POST_comments_slack,
        handle_POST_contexts,
        handle_POST_contributors,
        handle_POST_conversation_close,
        handle_POST_conversation_reopen,
        handle_POST_conversations,
        handle_POST_convSubscriptions,
        handle_POST_domainWhitelist,
        handle_POST_einvites,
        handle_POST_joinWithInvite,
        handle_POST_lti_conversation_assignment,
        handle_POST_lti_setup_assignment,
        handle_POST_math_update,
        handle_POST_metadata_answers,
        handle_POST_metadata_questions,
        handle_POST_metrics,
        handle_POST_notifyTeam,
        handle_POST_participants,
        handle_POST_ptptCommentMod,
        handle_POST_query_participants_by_metadata,
        handle_POST_reportCommentSelections,
        handle_POST_reports,
        handle_POST_reserve_conversation_id,
        handle_POST_sendCreatedLinkToEmail,
        handle_POST_sendEmailExportReady,
        handle_POST_slack_interactive_messages,
        handle_POST_slack_user_invites,
        handle_POST_stars,
        handle_POST_stripe_cancel,
        handle_POST_stripe_save_token,
        handle_POST_stripe_upgrade,
        handle_POST_trashes,
        handle_POST_tutorial,
        handle_POST_upvotes,
        handle_POST_users_invite,
        handle_POST_votes,
        handle_POST_waitinglist,
        handle_POST_xidWhitelist,
        handle_POST_zinvites,
        
        handle_PUT_comments,
        handle_PUT_conversations,
        handle_PUT_participants_extended,
        handle_PUT_ptptois,
        handle_PUT_reports,
        handle_PUT_users,
      } = helpers;
    const {
        assignToP,
        assignToPCustom,
        getArrayOfInt,
        getArrayOfStringNonEmpty,
        getArrayOfStringNonEmptyLimitLength,
        getBool,
        getConversationIdFetchZid,
        getEmail,
        getInt,
        getIntInRange,
        getNumberInRange,
        getOptionalStringLimitLength,
        getPassword,
        getPasswordWithCreatePasswordRules,
        getReportIdFetchRid,
        getStringLimitLength,
        getUrlLimitLength,
        moveToBody,
        need,
        needCookie,
        needHeader,
        resolve_pidThing,
        want,
        wantCookie,
        wantHeader,
    } = require('../utils/parameter');

    const middleware = require('./middleware');
    const authRoutes = require('./auth');
    const dataExportRoutes = require('./dataExport');
    const conversationRoutes = require('./conversation');
    const commentRoutes = require('./comment');
    const mathRoutes = require('./math');
    const metaDataRoutes = require('./metadata');
    
    middleware(app, {
        middleware_responseTime_start,
        redirectIfNotHttps,
        writeDefaultHead,
        redirectIfWrongDomain,
        redirectIfApiDomain,
        devMode,
        middleware_log_request_body,
        middleware_log_middleware_errors,
        addCorsHeader,
        middleware_check_if_options
    });

    authRoutes(app, { 
        assignToP,
        authOptional,
        enableAgid,
        getEmail,
        getPassword,
        getBool,
        getStringLimitLength,
        getOptionalStringLimitLength,
        getPasswordWithCreatePasswordRules,
        handle_POST_auth_password,
        handle_POST_auth_deregister,
        handle_POST_auth_facebook,
        handle_POST_auth_new,
        handle_POST_auth_pwresettoken,
        need,
        want
    });

    dataExportRoutes(app, {
        moveToBody,
        assignToP,
        getConversationIdFetchZid,
        assignToPCustom,
        getStringLimitLength,
        handle_GET_dataExport,
        handle_GET_dataExport_results,
        auth,
        need,
        want
    });

    conversationRoutes(app, {
        moveToBody,
        need,
        want,
        auth,
        assignToP,
        assignToPCustom,
        getOptionalStringLimitLength,
        getStringLimitLength,
        getConversationIdFetchZid,
        getBool,
        getInt,
        getEmail,
        handle_GET_conversationPreloadInfo,
        handle_GET_conversationsRecentlyStarted,
        handle_GET_conversationsRecentActivity,
        handle_POST_convSubscriptions,
        handle_POST_conversation_close,
        handle_POST_conversation_reopen,
        handle_PUT_conversations
    });

    commentRoutes(app, {
        timeout,
        moveToBody,
        authOptional,
        auth,
        need,
        want,
        getConversationIdFetchZid,
        assignToP,
        assignToPCustom,
        getArrayOfInt,
        getBool,
        getInt,
        getIntInRange,
        getNumberInRange,
        getReportIdFetchRid,
        getOptionalStringLimitLength,
        getStringLimitLength,
        getUrlLimitLength,
        haltOnTimeout,
        handle_GET_nextComment,
        handle_GET_comments,
        handle_POST_comments,
        handle_POST_comments_slack,
        handle_PUT_comments,
        handle_GET_comments_translations,
        resolve_pidThing
    });

    mathRoutes(app, {
        handle_GET_math_pca,
        moveToBody,
        redirectIfHasZidButNoConversationId,
        getConversationIdFetchZid,
        assignToP,
        assignToPCustom,
        getInt,
        getStringLimitLength,
        handle_GET_math_pca2,
        getReportIdFetchRid,
        handle_GET_math_correlationMatrix,
        need,
        want,
        wantHeader
    });

    metaDataRoutes(app, {
        moveToBody,
        auth,
        authOptional,
        assignToP,
        assignToPCustom,
        need,
        want,
        getInt,
        getOptionalStringLimitLength,
        getConversationIdFetchZid,
        handle_DELETE_metadata_questions,
        handle_DELETE_metadata_answers,
        handle_GET_metadata_questions,
        handle_POST_metadata_questions,
        handle_POST_metadata_answers,
        handle_GET_metadata_answers,
        handle_GET_metadata_choices,
        handle_GET_metadata
    });
}